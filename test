diff --git a/EventPlanner/Controllers/ChatController.cs b/EventPlanner/Controllers/ChatController.cs
index 29dc501..75f76c1 100644
--- a/EventPlanner/Controllers/ChatController.cs
+++ b/EventPlanner/Controllers/ChatController.cs
@@ -14,17 +14,13 @@ namespace EventPlanner.Controllers
     [ApiController]
     public class ChatController : Controller
     {
-        private IChatService _chatService;
-
         public ChatController(
             IWebHostEnvironment appEnvironment,
-            IChatService eventChatService,
             IEventStorageService eventStorageService,
             IEventOrganizationService eventOrganizationService,
-            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, userService)
-        {
-            _chatService = eventChatService;
-        }
+            IChatService chatService,
+            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, chatService, userService)
+        { }
 
         [Authorize]
         [HttpGet("{id}")]
diff --git a/EventPlanner/Controllers/Controller.cs b/EventPlanner/Controllers/Controller.cs
index 9033b0d..41cc81d 100644
--- a/EventPlanner/Controllers/Controller.cs
+++ b/EventPlanner/Controllers/Controller.cs
@@ -2,6 +2,7 @@ using System.Security.Claims;
 using Microsoft.AspNetCore.Mvc;
 using EventPlanner.Models;
 using EventPlanner.Exceptions;
+using EventPlanner.Services.ChatServices;
 using EventPlanner.Services.EventStorageServices;
 using EventPlanner.Services.EventOrganizationServices;
 using EventPlanner.Services.UserServices;
@@ -17,17 +18,20 @@ namespace EventPlanner.Controllers
 
         protected IEventStorageService _eventStorageService;
         protected IEventOrganizationService _eventOrganizationService;
+        protected IChatService _chatService;
         protected IUserService _userService;
 
         public Controller(
             IWebHostEnvironment appEnvironment,
             IEventStorageService eventStorageService,
             IEventOrganizationService eventOrganizationService,
+            IChatService chatService,
             IUserService userService)
         {
             _appEnvironment = appEnvironment;
             _eventStorageService = eventStorageService;
             _eventOrganizationService = eventOrganizationService;
+            _chatService = chatService;
             _userService = userService;
         }
 
diff --git a/EventPlanner/Controllers/EventController.cs b/EventPlanner/Controllers/EventController.cs
index ed9116d..a4fac43 100644
--- a/EventPlanner/Controllers/EventController.cs
+++ b/EventPlanner/Controllers/EventController.cs
@@ -1,4 +1,3 @@
-using System.Security.Claims;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.EntityFrameworkCore;
@@ -6,9 +5,9 @@ using EventPlanner.Controllers.Models;
 using EventPlanner.Exceptions;
 using EventPlanner.Models;
 using EventPlanner.Services.AdvertisingServices;
+using EventPlanner.Services.ChatServices;
 using EventPlanner.Services.EventStorageServices;
 using EventPlanner.Services.EventOrganizationServices;
-using EventPlanner.Services.ChatServices;
 using EventPlanner.Services.UserServices;
 
 namespace EventPlanner.Controllers
@@ -21,8 +20,6 @@ namespace EventPlanner.Controllers
 
         private Context _context;
         private IAdvertisingService _advertisingService;
-        private IChatService _chatService;
-
         public EventController(
             IWebHostEnvironment appEnvironment,
             Context context,
@@ -30,11 +27,10 @@ namespace EventPlanner.Controllers
             IEventStorageService eventStorageService,
             IEventOrganizationService eventOrganizationService,
             IChatService chatService,
-            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, userService)
+            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, chatService, userService)
         {
             _context = context;
             _advertisingService = advertisingService;
-            _chatService = chatService;
         }
 
         private async Task<string> UploadImageAsync(IFormFile? image)
@@ -274,7 +270,7 @@ namespace EventPlanner.Controllers
                 if (e.CreatorId != user.Id)
                     return Forbid();
 
-                var chats = await _chatService.GetChatsAsync(id);
+                var chats = await _chatService.GetChatsByEventAsync(id);
                 return new JsonResult(new {
                     title = e.Title,
                     chats = chats
diff --git a/EventPlanner/Controllers/UserController.cs b/EventPlanner/Controllers/UserController.cs
index 514ff19..b182197 100644
--- a/EventPlanner/Controllers/UserController.cs
+++ b/EventPlanner/Controllers/UserController.cs
@@ -6,6 +6,7 @@ using EventPlanner.Controllers.Models;
 using EventPlanner.Exceptions;
 using EventPlanner.Models;
 using EventPlanner.Services.AuthenticationServices;
+using EventPlanner.Services.ChatServices;
 using EventPlanner.Services.EventStorageServices;
 using EventPlanner.Services.EventOrganizationServices;
 using EventPlanner.Services.UserServices;
@@ -21,13 +22,14 @@ namespace EventPlanner.Controllers
         private Context _context;
 
         public UserController(
+            Context context,
             IWebHostEnvironment appEnvironment,
             IAuthenticationService authenticationService,
             EventPlanner.Services.AuthorizationService.IAuthorizationService authorizationService,
             IEventStorageService eventStorageService,
             IEventOrganizationService eventOrganizationService,
-            Context context,
-            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, userService)
+            IChatService chatService,
+            IUserService userService) : base(appEnvironment, eventStorageService, eventOrganizationService, chatService, userService)
         {
             _authenticationService = authenticationService;
             _authorizationService = authorizationService;
@@ -148,6 +150,32 @@ namespace EventPlanner.Controllers
             return new ActionException<BadRequestObjectResult>("Непредвиденная ошибка").FormResponse();
         }
 
+        [Authorize]
+        [HttpPatch]
+        public async Task<IActionResult> UpdateUserAsync([FromBody] UserModel model)
+        {
+            if (model.Password != null && model.Password != string.Empty && model.Password.Length < 8)
+                return BadRequest(new { Errors = new { Password = "Используйте не менее 8 символов", PasswordConfirm = "Используйте не менее 8 символов" } });
+
+            var rowId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
+            if (rowId == null)
+                return Unauthorized();
+
+            var user = await _userService.GetAsync(int.Parse(rowId));
+            if (user == null)
+                return Unauthorized();
+
+            user.Name = model.Name;
+            user.Surname = model.Surname;
+            user.Email = model.Email;
+            await _userService.UpdateAsync(user);
+
+            if (model.Password != null && model.Password != string.Empty)
+                await _authenticationService.UpdatePasswordAsync(user.Id, model.Password);
+
+            return Ok();
+        }
+
         [Authorize]
         [HttpGet("history")]
         public async Task<IActionResult> GetHistoryAsync()
@@ -181,29 +209,28 @@ namespace EventPlanner.Controllers
         }
 
         [Authorize]
-        [HttpPatch]
-        public async Task<IActionResult> UpdateUserAsync([FromBody] UserModel model)
+        [HttpGet("chats")]
+        public async Task<IActionResult> GetChatsAsync()
         {
-            if (model.Password != null && model.Password != string.Empty && model.Password.Length < 8)
-                return BadRequest(new { Errors = new { Password = "Используйте не менее 8 символов", PasswordConfirm = "Используйте не менее 8 символов" } });
-
-            var rowId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
-            if (rowId == null)
-                return Unauthorized();
-
-            var user = await _userService.GetAsync(int.Parse(rowId));
-            if (user == null)
-                return Unauthorized();
-
-            user.Name = model.Name;
-            user.Surname = model.Surname;
-            user.Email = model.Email;
-            await _userService.UpdateAsync(user);
-
-            if (model.Password != null && model.Password != string.Empty)
-                await _authenticationService.UpdatePasswordAsync(user.Id, model.Password);
-
-            return Ok();
+            try
+            {
+                var user = await GetUserAsync();
+                var chats = await _chatService.GetChatsByCreatorAsync(user.Id);
+                return new JsonResult(new {
+                    chats = chats
+                    .OrderBy(c => c.StatusId != ChatStatus.Waiting)
+                    .ThenBy(c => c.StatusId != ChatStatus.Waiting)
+                    .Select(c => new {
+                        id = c.Id,
+                        theme = c.Theme,
+                        status = c.Status.Name
+                    })
+                });
+            }
+            catch (Exception ex)
+            {
+                return ExceptionHandler.Handle(ex);
+            }
         }
     }
 }
diff --git a/EventPlanner/Services/ChatServices/ChatService.cs b/EventPlanner/Services/ChatServices/ChatService.cs
index 889ed98..f7a4a1b 100644
--- a/EventPlanner/Services/ChatServices/ChatService.cs
+++ b/EventPlanner/Services/ChatServices/ChatService.cs
@@ -25,7 +25,11 @@ public class EventChatService : CommonQueries<int, Message>, IChatService
         return chat;
     }
 
-    public async Task<List<Chat>> GetChatsAsync(int id) => await _common.GetAllAsync(IncludeChatValues());
+    public async Task<List<Chat>> GetChatsByEventAsync(int eventId) =>
+        await IncludeChatValues().Where(c => c.EventId == eventId).ToListAsync();
+
+    public async Task<List<Chat>> GetChatsByCreatorAsync(int initiatorId) =>
+        await IncludeChatValues().Where(c => c.InitiatorId == initiatorId).ToListAsync();
 
     public async Task<Chat> CreateChatAsync(Chat chat) => await _common.CreateAsync(chat);
 
diff --git a/EventPlanner/Services/ChatServices/IChatService.cs b/EventPlanner/Services/ChatServices/IChatService.cs
index 1d7a7f0..215719e 100644
--- a/EventPlanner/Services/ChatServices/IChatService.cs
+++ b/EventPlanner/Services/ChatServices/IChatService.cs
@@ -8,7 +8,8 @@ namespace EventPlanner.Services.ChatServices;
 public interface IChatService : IDataService<int, Message>
 {
     Task<Chat> GetChatAsync(int id);
-    Task<List<Chat>> GetChatsAsync(int eventId);
+    Task<List<Chat>> GetChatsByEventAsync(int eventId);
+    Task<List<Chat>> GetChatsByCreatorAsync(int initiatorId);
     Task<Chat> CreateChatAsync(Chat chat);
     Task<Chat> UpdateChatStatusAsync(int id, EventPlanner.ChatStatus status);
 }
diff --git a/event-planner-front/src/api/services/UserService.ts b/event-planner-front/src/api/services/UserService.ts
index 8591e01..2fb431c 100644
--- a/event-planner-front/src/api/services/UserService.ts
+++ b/event-planner-front/src/api/services/UserService.ts
@@ -31,5 +31,6 @@ export const UserService = {
         return api.patch("/user", data);
     },
     getHistory: async <T>() => api.get<T>("/user/history"),
+    getChats: async () => api.get("/user/chats"),
     promote: async () => api.post("/user/role"),
 };
diff --git a/event-planner-front/src/components/UI/Header.tsx b/event-planner-front/src/components/UI/Header.tsx
index 41e31b6..07f3a5a 100644
--- a/event-planner-front/src/components/UI/Header.tsx
+++ b/event-planner-front/src/components/UI/Header.tsx
@@ -33,7 +33,7 @@ export const Header: FC = observer(() => {
                             },
                             {
                                 label: "Обращения",
-                                link: "/user/feedback",
+                                link: "/user/chats",
                                 icon: (
                                     <i className="fa-solid fa-comments text-sm"></i>
                                 ),
diff --git a/event-planner-front/src/pages/event/Event.tsx b/event-planner-front/src/pages/event/Event.tsx
index c4f5696..d5ea736 100644
--- a/event-planner-front/src/pages/event/Event.tsx
+++ b/event-planner-front/src/pages/event/Event.tsx
@@ -345,7 +345,7 @@ export const Event: FC = observer(() => {
                             },
                             {
                                 label: "Обратная связь",
-                                link: `/events/${eventId}/feedback`,
+                                link: `/events/${eventId}/chats`,
                             },
                         ]}
                     >
diff --git a/event-planner-front/src/pages/event/info/Participants.tsx b/event-planner-front/src/pages/event/info/Participants.tsx
index 1baf79d..cf64064 100644
--- a/event-planner-front/src/pages/event/info/Participants.tsx
+++ b/event-planner-front/src/pages/event/info/Participants.tsx
@@ -83,7 +83,7 @@ export const Participants: FC = () => {
                     </ListItem>
                     <ListItem className="text-green">Участники</ListItem>
                     <ListItem
-                        link={`/events/${eventId}/feedback`}
+                        link={`/events/${eventId}/chats`}
                         className="text-darkgray hover:text-gray"
                     >
                         Обратная связь
diff --git a/event-planner-front/src/pages/event/info/Statistics.tsx b/event-planner-front/src/pages/event/info/Statistics.tsx
index fb8d23f..335239f 100644
--- a/event-planner-front/src/pages/event/info/Statistics.tsx
+++ b/event-planner-front/src/pages/event/info/Statistics.tsx
@@ -115,7 +115,7 @@ export const Statistics: FC = () => {
                         Участники
                     </ListItem>
                     <ListItem
-                        link={`/events/${eventId}/feedback`}
+                        link={`/events/${eventId}/chats`}
                         className="text-darkgray hover:text-gray"
                     >
                         Обратная связь
diff --git a/event-planner-front/src/pages/event/info/feedback/Chat.tsx b/event-planner-front/src/pages/event/info/feedback/Chat.tsx
deleted file mode 100644
index 6571901..0000000
--- a/event-planner-front/src/pages/event/info/feedback/Chat.tsx
+++ /dev/null
@@ -1,280 +0,0 @@
-/* eslint-disable indent */
-import React, { FC, useEffect, useState } from "react";
-import { useNavigate, useParams } from "react-router-dom";
-
-import { getErrors } from "../../../../api";
-import { ChatService } from "../../../../api/services/ChatService";
-import { EventService } from "../../../../api/services/EventService";
-import { PageLayout } from "../../../../components/layouts/PageLayout";
-import { ButtonStyles } from "../../../../components/UI/buttons/Button";
-import { SubmitButton } from "../../../../components/UI/buttons/SubmitButton";
-import { Textarea } from "../../../../components/UI/inputs/Textarea";
-import { List } from "../../../../components/UI/list/List";
-import { ListItem } from "../../../../components/UI/list/ListItem";
-import { StatusIcon } from "../../../../components/UI/Status";
-import { WithIcon } from "../../../../components/UI/WithIcon";
-import { useForm } from "../../../../hooks/forms/useForm";
-import { IFormInputStatus, IServerError } from "../../../../types";
-import { IChat, IDefaultEvent } from "../../../../types/Api";
-import { Status } from "../../../../types/Api";
-
-export const Chat: FC = () => {
-    const navigate = useNavigate();
-    const { eventId, chatId } = useParams();
-    const [eventTitle, setTitle] = useState("");
-    const [chat, setChat] = useState<IChat>();
-    const [closeChat, setClose] = useState(false);
-
-    const chatForm = useForm(sendChatFormData);
-    const [trigger, setTrigger] = useState(false);
-
-    const titles = {
-        [Status.Active]: "активно",
-        [Status.Waiting]: "ожидание ответа",
-        [Status.Closed]: "закрыт",
-    };
-
-    async function sendChatFormData(data: {
-        [key: string]: IFormInputStatus;
-    }): Promise<IServerError> {
-        console.log("chat message sent!");
-
-        const result = Object.entries(data).map(([key, d]) => [key, d.value]);
-        let errors = {};
-        try {
-            const response = await ChatService.sendMessage(
-                Number(chatId),
-                Object.fromEntries([...result, ["closeChat", closeChat]])
-            );
-            setChat(response.data);
-            setTrigger(!trigger);
-        } catch (e) {
-            errors = getErrors(e);
-        }
-
-        return errors;
-    }
-
-    useEffect(() => {
-        /* eslint-disable react-hooks/exhaustive-deps */
-        if (eventId) {
-            // Sending request to server
-            const getEvent = async () => {
-                if (!eventId) return;
-
-                try {
-                    const response = await ChatService.getChat(Number(chatId));
-                    setChat(response.data);
-                    const event = await EventService.get<{
-                        event: IDefaultEvent;
-                    }>(Number(eventId));
-                    setTitle(event.data.event.title);
-                } catch {
-                    navigate("/");
-                }
-            };
-            getEvent();
-        }
-    }, []);
-
-    useEffect(() => {
-        /* eslint-disable react-hooks/exhaustive-deps */
-        const status = chatForm.getInputStatus("text");
-        if (status) {
-            status.value = "";
-            status.removeDirty();
-            chatForm.updateInputStatuses("text", status);
-            chatForm.reset();
-        }
-    }, [trigger]);
-
-    return (
-        <PageLayout title={eventTitle}>
-            <div className="flex gap-12">
-                <List className="w-48 text-black">
-                    <ListItem
-                        link={`/events/${eventId}/statistics`}
-                        className="text-darkgray hover:text-gray"
-                    >
-                        Статистика
-                    </ListItem>
-                    <ListItem
-                        link={`/events/${eventId}/participants`}
-                        className="text-darkgray hover:text-gray"
-                    >
-                        Участники
-                    </ListItem>
-                    <ListItem
-                        className="text-green"
-                        link={`/events/${eventId}/feedback`}
-                    >
-                        Обратная связь
-                    </ListItem>
-                </List>
-                <div className="flex flex-col gap-8 w-full">
-                    <div className="flex flex-col gap-4">
-                        <div className="flex flex-col gap-2">
-                            <h3 className="text-xl">Детали</h3>
-                            <div className="grid grid-cols-2 gap-2">
-                                <div className="flex flex-col">
-                                    <span className="font-light">
-                                        Индентификатор:
-                                    </span>
-                                    <span>{chat?.id}</span>
-                                </div>
-                                <div className="flex flex-col">
-                                    <span className="font-light">Статус:</span>
-                                    <StatusIcon
-                                        status={
-                                            Status[
-                                                chat?.status ?? 0
-                                            ] as unknown as number
-                                        }
-                                        titles={titles}
-                                    />
-                                </div>
-                                <div className="flex flex-col">
-                                    <span className="font-light">Тема:</span>
-                                    <span>{chat?.theme}</span>
-                                </div>
-                                <div className="flex flex-col">
-                                    <span className="font-light">
-                                        Создатель:
-                                    </span>
-                                    <span>{chat?.creator}</span>
-                                </div>
-                                <div className="flex flex-col">
-                                    <span className="font-light">Создано:</span>
-                                    <span>{chat?.creationTime}</span>
-                                </div>
-                            </div>
-                        </div>
-                        <div className="flex flex-col gap-2">
-                            <h3 className="text-xl">Переписка</h3>
-                            <div className="flex flex-col">
-                                {chat?.messages.map((m, index) => (
-                                    <div
-                                        className="w-full flex border-b-2 border-slate-300 last:border-b-0"
-                                        key={index}
-                                    >
-                                        <div className="w-40 px-4 py-2 border-r-2 border-slate-300">
-                                            <div>{m.creator}</div>
-                                            <span className="text-xs">
-                                                {new Date(
-                                                    m.creationTime
-                                                ).toLocaleString()}
-                                            </span>
-                                        </div>
-                                        <div className="px-4 py-2 whitespace-pre-wrap w-full">
-                                            {m.text}
-                                        </div>
-                                    </div>
-                                ))}
-                            </div>
-                            <div className="mt-2">
-                                <form
-                                    onSubmit={chatForm.onSubmit}
-                                    onChange={chatForm.onChange}
-                                    className="w-full"
-                                >
-                                    <Textarea
-                                        name="text"
-                                        className="h-60"
-                                        label="Текст сообщения:"
-                                        minLength={50}
-                                        maxLength={4500}
-                                        serverError={
-                                            chatForm.serverErrors["text"]
-                                        }
-                                        isSubmitted={chatForm.isSubmitted}
-                                        callBack={chatForm.updateInputStatuses}
-                                        key={Number(trigger)}
-                                    />
-                                    <div className="flex justify-end items-center gap-2">
-                                        {chat &&
-                                        (Status[
-                                            chat.status
-                                        ] as unknown as number) ===
-                                            Status.Closed ? (
-                                            <>
-                                                <SubmitButton
-                                                    isPrimary={true}
-                                                    onClick={() =>
-                                                        setClose(false)
-                                                    }
-                                                    buttonStyle={
-                                                        chatForm.hasError
-                                                            ? ButtonStyles.BUTTON_RED
-                                                            : ButtonStyles.BUTTON_GRAY
-                                                    }
-                                                >
-                                                    <WithIcon
-                                                        icon={
-                                                            <i className="fa-solid fa-rotate text-green" />
-                                                        }
-                                                    >
-                                                        Открыть вопрос
-                                                    </WithIcon>
-                                                </SubmitButton>
-                                                <SubmitButton
-                                                    disabled={chatForm.hasError}
-                                                    isPrimary={true}
-                                                    buttonStyle={
-                                                        chatForm.hasError
-                                                            ? ButtonStyles.BUTTON_RED
-                                                            : ButtonStyles.BUTTON_GREEN
-                                                    }
-                                                    onClick={() =>
-                                                        setClose(true)
-                                                    }
-                                                >
-                                                    Отправить
-                                                </SubmitButton>
-                                            </>
-                                        ) : (
-                                            <>
-                                                <SubmitButton
-                                                    isPrimary={true}
-                                                    onClick={() =>
-                                                        setClose(true)
-                                                    }
-                                                    buttonStyle={
-                                                        chatForm.hasError
-                                                            ? ButtonStyles.BUTTON_RED
-                                                            : ButtonStyles.BUTTON_GRAY
-                                                    }
-                                                >
-                                                    <WithIcon
-                                                        icon={
-                                                            <i className="fa-regular fa-circle-check text-blue" />
-                                                        }
-                                                    >
-                                                        Закрыть вопрос с ответом
-                                                    </WithIcon>
-                                                </SubmitButton>
-                                                <SubmitButton
-                                                    disabled={chatForm.hasError}
-                                                    isPrimary={true}
-                                                    buttonStyle={
-                                                        chatForm.hasError
-                                                            ? ButtonStyles.BUTTON_RED
-                                                            : ButtonStyles.BUTTON_GREEN
-                                                    }
-                                                    onClick={() =>
-                                                        setClose(false)
-                                                    }
-                                                >
-                                                    Отправить
-                                                </SubmitButton>
-                                            </>
-                                        )}
-                                    </div>
-                                </form>
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </PageLayout>
-    );
-};
diff --git a/event-planner-front/src/pages/event/info/feedback/Feedback.tsx b/event-planner-front/src/pages/event/info/feedback/Feedback.tsx
deleted file mode 100644
index 73bf0a0..0000000
--- a/event-planner-front/src/pages/event/info/feedback/Feedback.tsx
+++ /dev/null
@@ -1,108 +0,0 @@
-import React, { FC, useEffect, useState } from "react";
-import { useNavigate, useParams } from "react-router-dom";
-
-import { EventService } from "../../../../api/services/EventService";
-import { PageLayout } from "../../../../components/layouts/PageLayout";
-import { EmptyPlaceholder } from "../../../../components/UI/EmptyPlaceholder";
-import { List } from "../../../../components/UI/list/List";
-import { ListItem } from "../../../../components/UI/list/ListItem";
-import { StatusIcon } from "../../../../components/UI/Status";
-import { Table } from "../../../../components/UI/Table";
-import { IEventChat, IEventChatResponse } from "../../../../types/Api";
-import { Status } from "../../../../types/Api";
-
-export const Feedback: FC = () => {
-    const navigate = useNavigate();
-    const { eventId } = useParams();
-    const [eventTitle, setTitle] = useState("");
-    const [chats, setChats] = useState<IEventChatResponse>();
-
-    const titles = {
-        [Status.Active]: "активно",
-        [Status.Waiting]: "ожидание ответа",
-        [Status.Closed]: "закрыт",
-    };
-
-    useEffect(() => {
-        /* eslint-disable react-hooks/exhaustive-deps */
-        if (eventId) {
-            // Sending request to server
-            const getEvent = async () => {
-                if (!eventId) return;
-
-                try {
-                    const response = await EventService.getChats(
-                        Number(eventId)
-                    );
-                    setTitle(response.data.title);
-                    setChats(response.data);
-                } catch {
-                    navigate("/");
-                }
-            };
-            getEvent();
-        }
-    }, []);
-
-    return (
-        <PageLayout title={eventTitle}>
-            <div className="flex gap-12">
-                <List className="w-48 text-black">
-                    <ListItem
-                        link={`/events/${eventId}/statistics`}
-                        className="text-darkgray hover:text-gray"
-                    >
-                        Статистика
-                    </ListItem>
-                    <ListItem
-                        link={`/events/${eventId}/participants`}
-                        className="text-darkgray hover:text-gray"
-                    >
-                        Участники
-                    </ListItem>
-                    <ListItem className="text-green">Обратная связь</ListItem>
-                </List>
-                <div className="flex flex-col gap-8 w-full">
-                    <div className="flex flex-col gap-4">
-                        <h3 className="text-xl">Обращения участников</h3>
-                        {chats && chats.chats.length > 0 ? (
-                            <Table
-                                headers={["Тема", "Статус"]}
-                                data={chats.chats as never[]}
-                                ceilsSchema={[
-                                    (value: IEventChat) => (
-                                        <div className="font-medium w-full overflow-hidden text-ellipsis whitespace-nowrap">
-                                            {value.theme}
-                                        </div>
-                                    ),
-                                    (value: IEventChat) => (
-                                        <StatusIcon
-                                            status={
-                                                Status[
-                                                    value.status
-                                                ] as unknown as number
-                                            }
-                                            titles={titles}
-                                        />
-                                    ),
-                                    () => (
-                                        <div className="w-6">
-                                            <i className="fa-solid fa-chevron-right my-2 text-slate-400"></i>
-                                        </div>
-                                    ),
-                                ]}
-                                rowCallback={(value: IEventChat) => {
-                                    navigate(
-                                        `/events/${eventId}/chats/${value.id}`
-                                    );
-                                }}
-                            />
-                        ) : (
-                            <EmptyPlaceholder text="Пока обращений нет" />
-                        )}
-                    </div>
-                </div>
-            </div>
-        </PageLayout>
-    );
-};
diff --git a/event-planner-front/src/router/index.ts b/event-planner-front/src/router/index.ts
index 321c418..a1e21e3 100644
--- a/event-planner-front/src/router/index.ts
+++ b/event-planner-front/src/router/index.ts
@@ -1,8 +1,7 @@
 import React from "react";
 
 import { Event } from "../pages/event/Event";
-import { Chat } from "../pages/event/info/feedback/Chat";
-import { Feedback } from "../pages/event/info/feedback/Feedback";
+import { Feedback } from "../pages/event/info/Feedback";
 import { Participants } from "../pages/event/info/Participants";
 import { Statistics } from "../pages/event/info/Statistics";
 import { EditEvent } from "../pages/event/setup/EditEvent";
@@ -12,6 +11,7 @@ import { Events } from "../pages/Events";
 import { Learn } from "../pages/Learn";
 import { Login } from "../pages/Login";
 import { Signup } from "../pages/Signup";
+import { Chats } from "../pages/user/Chats";
 import { History } from "../pages/user/History";
 import { Settings } from "../pages/user/Settings";
 
@@ -29,11 +29,13 @@ export const routes: route[] = [
     { path: "/events/:eventId/tickets", component: TicketsPage },
     { path: "/events/:eventId/statistics", component: Statistics },
     { path: "/events/:eventId/participants", component: Participants },
-    { path: "/events/:eventId/feedback", component: Feedback },
-    { path: "/events/:eventId/chats/:chatId", component: Chat },
+    { path: "/events/:eventId/chats", component: Feedback },
+    { path: "/events/:eventId/chats/:chatId", component: Feedback },
     { path: "/learn", component: Learn },
     { path: "/user/settings", component: Settings },
     { path: "/user/history", component: History },
+    { path: "/user/chats", component: Chats },
+    { path: "/user/chats/:chatId", component: Chats },
 ];
 
 export const authRoutes: route[] = [
